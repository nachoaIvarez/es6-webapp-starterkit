'use strict';

import browserSync from 'browser-sync';
import Builder from 'systemjs-builder';
import del from 'del';
import gulp from 'gulp';
import gulpLoadPlugins from 'gulp-load-plugins';
import runSequence from 'run-sequence';

const plugins = gulpLoadPlugins();

/* *****************************************************************************
                                  MAIN TASKS                                   *
***************************************************************************** */

// Generate CSS files from SCSS files and inyect css changes in browserSync
gulp.task('sass', () => {
  return gulp.src('src/scss/*.scss')
    .pipe(plugins.sourcemaps.init())
    .pipe(plugins.sass())
    .pipe(plugins.sourcemaps.write({includeContent: false}))
    .pipe(plugins.sourcemaps.init({loadMaps: true})) // Load sourcemaps generated by sass
    .pipe(plugins.autoprefixer({browsers: ['last 3 versions']}))
    .on('error', plugins.util.log)
    .pipe(plugins.sourcemaps.write('.'))
    .pipe(gulp.dest('src/css'))
    .pipe(browserSync.stream())
    .on('error', plugins.util.log);
});

// Lint JS files
gulp.task('lint', () => {
  return gulp.src(['src/**/*.js', '!src/config.js', '!src/node_modules/**/*.js', '!src/jspm_packages/**/*.js', '!*.json'])
    .pipe(plugins.cached('js')) // Process only changed files
    .pipe(plugins.eslint())
    .pipe(plugins.eslint.format());
});

// BrowserSync Server
gulp.task('serve', ['sass'], () => {
  browserSync.init([
    'src/**/*.html'
  ], {
    notify: false,
    server: {
      baseDir: ['src']
    },
    port: 3001,
    tunnel: false
  });

  gulp.watch('src/**/*.js', ['lint']);
  gulp.watch('src/**/*.scss', ['sass']);
});

// Default
gulp.task('default', ['serve']);

/* *****************************************************************************
*                              DISTRIBUTION TASKS                              *
***************************************************************************** */

// Minify images
gulp.task('images', () => {
  return gulp.src('src/images/**/*')
    .pipe(plugins.cache(plugins.imagemin({
      progressive: true,
      interlaced: true,
      // don't remove IDs from SVGs, they are often used
      // as hooks for embedding and styling
      svgoPlugins: [{cleanupIDs: false}]
    })))
    .pipe(gulp.dest('dist/images'));
});

// Optmize CSS
gulp.task('css', () => {
  return gulp.src('src/css/*.css')
    .pipe(plugins.csso())
    .pipe(gulp.dest('dist/css'))
    .on('error', plugins.util.log);
});

// Wire bundled dependencies to dist html
gulp.task('buildhtml', () => {
  return gulp.src('src/index.html')
    .pipe(plugins.htmlReplace({
      'js': '/app.min.js'
    }))
    .pipe(plugins.minifyHtml({conditionals: true}))
    .pipe(gulp.dest('dist'));
});

// Minify HTML
gulp.task('html', ['buildhtml'], () => {
  return gulp.src(['src/**/*.html', '!src/index.html', '!src/node_modules/**/*.*', '!src/jspm_packages/**/*.*'])
    .pipe(plugins.minifyHtml())
    .pipe(gulp.dest('dist'));
});

// Copy files to 'dist'
gulp.task('files', () => gulp.src(['src/favicon.png', 'src/robots.txt'], {dot: true}).pipe(gulp.dest('dist')));

// Delete dist Directory
gulp.task('clean', del.bind(null, ['dist']));

// Bundle with jspm
gulp.task('bundle', () => {
  const builder = new Builder('src', 'src/config.js');
  builder.buildStatic('js/app.js', 'dist/app.min.js', {
    runtime: false,
    minify: true,
    mangle: true,
    sourceMaps: true
  });
});

// Gzip distributable
gulp.task('gzip', () => {
  return gulp.src('dist/**/*').pipe(plugins.size({title: 'build', gzip: true}));
});

// Main build task
gulp.task('build', () => {
  return runSequence(
    'clean',
    'files',
    'sass',
    ['css', 'images', 'html', 'bundle'],
    'gzip'
  );
});
